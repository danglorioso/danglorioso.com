---
import SpeedInsights from '@vercel/speed-insights/astro';

interface Props {
	title: string;
	description?: string;
}
const { title, description } = Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<link rel="icon" type="image/png" href="/favicon.png" sizes="512x512" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body class="bg-slate-950/95 text-white min-h-screen relative overflow-hidden">
		<!-- Particle Canvas Background -->
		<canvas id="particle-canvas" class="fixed top-0 left-0 w-full h-full -z-10"></canvas>

		<SpeedInsights />
		
		<script is:inline>
			// Particle System
			class ParticleSystem {
				constructor() {
					this.canvas = document.getElementById('particle-canvas');
					this.ctx = this.canvas.getContext('2d');
					this.particles = [];
					this.mouseX = 0;
					this.mouseY = 0;
					this.time = 0;
					
					this.resize();
					this.createParticles();
					this.bindEvents();
					this.animate();
				}
				
				resize() {
					this.canvas.width = window.innerWidth;
					this.canvas.height = window.innerHeight;
				}
				
				createParticles() {
					const particleCount = Math.min(80, Math.floor((this.canvas.width * this.canvas.height) / 15000));
					
					for (let i = 0; i < particleCount; i++) {
						this.particles.push({
							x: Math.random() * this.canvas.width,
							y: Math.random() * this.canvas.height,
							vx: (Math.random() - 0.5) * 0.5,
							vy: (Math.random() - 0.5) * 0.5,
							size: Math.random() * 2 + 0.5,
							opacity: Math.random() * 0.5 + 0.1,
							originalOpacity: Math.random() * 0.5 + 0.1,
							pulsePhase: Math.random() * Math.PI * 2,
							connectionRadius: Math.random() * 100 + 80
						});
					}
				}
				
				bindEvents() {
					window.addEventListener('resize', () => {
						this.resize();
						this.particles = [];
						this.createParticles();
					});
					
					this.canvas.addEventListener('mousemove', (e) => {
						this.mouseX = e.clientX;
						this.mouseY = e.clientY;
					});
				}
				
				updateParticle(particle) {
					// Basic movement
					particle.x += particle.vx;
					particle.y += particle.vy;
					
					// Subtle mouse interaction
					const dx = this.mouseX - particle.x;
					const dy = this.mouseY - particle.y;
					const distance = Math.sqrt(dx * dx + dy * dy);
					
					if (distance < 150) {
						const force = (150 - distance) / 150;
						particle.x -= dx * force * 0.002;
						particle.y -= dy * force * 0.002;
					}
					
					// Gentle floating motion
					particle.x += Math.sin(this.time * 0.001 + particle.pulsePhase) * 0.2;
					particle.y += Math.cos(this.time * 0.0015 + particle.pulsePhase) * 0.15;
					
					// Pulsing opacity
					particle.opacity = particle.originalOpacity + Math.sin(this.time * 0.002 + particle.pulsePhase) * 0.2;
					
					// Wrap around edges
					if (particle.x < 0) particle.x = this.canvas.width;
					if (particle.x > this.canvas.width) particle.x = 0;
					if (particle.y < 0) particle.y = this.canvas.height;
					if (particle.y > this.canvas.height) particle.y = 0;
				}
				
				drawConnections() {
					for (let i = 0; i < this.particles.length; i++) {
						for (let j = i + 1; j < this.particles.length; j++) {
							const p1 = this.particles[i];
							const p2 = this.particles[j];
							
							const dx = p1.x - p2.x;
							const dy = p1.y - p2.y;
							const distance = Math.sqrt(dx * dx + dy * dy);
							
							if (distance < Math.min(p1.connectionRadius, p2.connectionRadius)) {
								const opacity = (1 - distance / Math.min(p1.connectionRadius, p2.connectionRadius)) * 0.1;
								
								this.ctx.strokeStyle = `rgba(148, 163, 184, ${opacity})`;
								this.ctx.lineWidth = 0.5;
								this.ctx.beginPath();
								this.ctx.moveTo(p1.x, p1.y);
								this.ctx.lineTo(p2.x, p2.y);
								this.ctx.stroke();
							}
						}
					}
				}
				
				drawParticles() {
					this.particles.forEach(particle => {
						this.ctx.beginPath();
						this.ctx.arc(particle.x, particle.y, particle.size, 0, Math.PI * 2);
						this.ctx.fillStyle = `rgba(148, 163, 184, ${particle.opacity})`;
						this.ctx.fill();
						
						// Add a subtle glow
						this.ctx.beginPath();
						this.ctx.arc(particle.x, particle.y, particle.size * 2, 0, Math.PI * 2);
						this.ctx.fillStyle = `rgba(148, 163, 184, ${particle.opacity * 0.1})`;
						this.ctx.fill();
					});
				}
				
				animate() {
					this.time += 16;
					
					// Clear with slight trail effect
					this.ctx.fillStyle = 'rgba(2, 6, 23, 0.05)';
					this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);
					
					// Update and draw
					this.particles.forEach(particle => this.updateParticle(particle));
					this.drawConnections();
					this.drawParticles();
					
					requestAnimationFrame(() => this.animate());
				}
			}
			
			// Initialize when DOM is loaded
			if (document.readyState === 'loading') {
				document.addEventListener('DOMContentLoaded', () => new ParticleSystem());
			} else {
				new ParticleSystem();
			}
		</script>
	</body>
</html>

<style is:global>
	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}
	
	html, body {
		font-family: system-ui, sans-serif;
		overflow-x: hidden;
	}
	
	body {
		background: linear-gradient(135deg, #020617 0%, #0f172a 50%, #1e293b 100%);
		min-height: 100vh;
	}

	/* Custom scrollbar for webkit browsers */
	::-webkit-scrollbar {
		width: 8px;
	}
	
	::-webkit-scrollbar-track {
		background: #1e293b;
	}
	
	::-webkit-scrollbar-thumb {
		background: #475569;
		border-radius: 4px;
	}
	
	::-webkit-scrollbar-thumb:hover {
		background: #64748b;
	}

	/* Responsive adjustments */
	@media (max-width: 1024px) {
		main {
			flex-direction: column;
			align-items: center;
			text-align: center;
		}
		
		.flex-1.max-w-lg.ml-16 {
			margin-left: 0;
			margin-top: 3rem;
			max-width: 100%;
		}
	}
	
	@media (max-width: 768px) {
		nav {
			padding-top: 1.5rem;
			padding-bottom: 2rem;
		}
		
		nav > div {
			flex-wrap: wrap;
			gap: 1rem;
			padding: 0.75rem 1.5rem;
		}
		
		h1 {
			font-size: 4rem !important;
		}
		
		.bg-slate-300 span {
			font-size: 3rem !important;
		}
	}
</style>
